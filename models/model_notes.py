"""data models for notes"""

from sqlalchemy import Boolean, Column, ForeignKey, Integer, String
from sqlalchemy.orm import declarative_base, relationship, Mapped, mapped_column

notes_base = declarative_base()


class NoteModel(notes_base):
    """Data class for notes"""

    __tablename__ = "note_base"

    id: Mapped[int] = mapped_column(primary_key=True)
    name: Mapped[str] = mapped_column(String(50), nullable=True)
    content: Mapped[str] = mapped_column(nullable=True)
    source: Mapped[str] = mapped_column(nullable=True)
    type: Mapped[str] = mapped_column(nullable=True)
    # generated by AI
    topics: Mapped[str] = mapped_column(nullable=True)  # an array?
    summary: Mapped[str] = mapped_column(nullable=True)
    sentiment: Mapped[str] = mapped_column(nullable=True)
    # index related
    indexed: Mapped[bool] = mapped_column(nullable=True)
    dirty: Mapped[bool] = mapped_column(nullable=True)
    index_reference: Mapped[str] = mapped_column(nullable=True)

    notes = relationship("NoteTypeModel", back_populates="note")

    def __repr__(self):
        return f"{self.__class__.__name__}({self.id!r}) - {self.name!r}"


class NoteTypeModel(notes_base):
    """Base class for note types"""

    __tablename__ = "note_type_base"

    id: Mapped[int] = mapped_column(primary_key=True)
    type: Mapped[str] = mapped_column(nullable=True)

    __mapper_args__ = {
        "polymorphic_identity": "note_type",
        "polymorphic_on": "type",
    }

    note_id = Column(Integer, ForeignKey("note_base.id"))
    note = relationship("NoteModel", back_populates="notes")

    def __repr__(self):
        return f"{self.__class__.__name__}({self.note.id!r}) - {self.type!r}"


class VoiceNoteModel(NoteTypeModel):
    """class for voice notes"""

    __tablename__ = "note_voicenote"

    id: Mapped[int] = mapped_column(ForeignKey("note_type_base.id"), primary_key=True)
    file_location: Mapped[str] = mapped_column(nullable=True)
    file_encoding: Mapped[str] = mapped_column(nullable=True)
    # processing
    transcribed: Mapped[bool] = mapped_column(nullable=True)
    transcription_rating: Mapped[int] = mapped_column(nullable=True)
    service_used: Mapped[str] = mapped_column(nullable=True)

    __mapper_args__ = {
        "polymorphic_identity": "voicenote",
    }

    def __repr__(self):
        return f"{self.__class__.__name__}({self.note.id!r}) - {self.type!r}"
